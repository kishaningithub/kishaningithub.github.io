<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tdd on Kishan B</title>
    <link>https://kishaningithub.github.io/tags/tdd/</link>
    <description>Recent content in Tdd on Kishan B</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 26 Jun 2022 15:12:24 +0530</lastBuildDate>
    <atom:link href="https://kishaningithub.github.io/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Used TDD Approach for a Hello World Rust CLI App</title>
      <link>https://kishaningithub.github.io/blog/used-tdd-approach-for-a-hello-world-rust-cli-app/</link>
      <pubDate>Sun, 26 Jun 2022 15:12:24 +0530</pubDate>
      <guid>https://kishaningithub.github.io/blog/used-tdd-approach-for-a-hello-world-rust-cli-app/</guid>
      <description>&lt;p&gt;For the first time ever in my life i wrote hello world application using &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD (Test driven development)&lt;/a&gt;. Don&amp;rsquo;t get me wrong here, i have practiced TDD before for larger applications but never have i done it for an hello world app.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;p&gt;Write an CLI application that prints out &amp;ldquo;Hello TDD world!&amp;rdquo; in STDOUT.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-did-i-do-it&#34;&gt;How did i do it?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;I created a project using &lt;code&gt;cargo new hello-tdd-world&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;I added a dependency &lt;code&gt;assert_cmd&lt;/code&gt; which lets us test out outputs of any binary program&lt;/li&gt;&#xA;&lt;li&gt;Created a file &lt;code&gt;tests/cli.rs&lt;/code&gt;  and I wrote the following test&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; assert_cmd::Command;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[test]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_cli_app_should_print_hello_tdd_world&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; cmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Command::cargo_bin(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world-tdd&amp;#34;&lt;/span&gt;).unwrap();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmd.assert().success().stdout(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello TDD world!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Run the test using command &lt;code&gt;cargo test&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The above test will fail saying the following, this happens because the cargo new had generated a &lt;code&gt;src/main.rs&lt;/code&gt; file which printed out &amp;ldquo;Hello world!&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;running 1 test&#xA;test test_cli_app_should_print_hello_tdd_world ... FAILED&#xA;&#xA;failures:&#xA;&#xA;---- test_cli_app_should_print_hello_tdd_world stdout ----&#xA;thread &amp;#39;test_cli_app_should_print_hello_tdd_world&amp;#39; panicked at &amp;#39;Unexpected stdout, failed diff original var&#xA;├── original: Hello TDD world!&#xA;├── diff:&#xA;│   --- &#x9;orig&#xA;│   +++ &#x9;var&#xA;│   @@ -1 +1 @@&#xA;│   -Hello TDD world!&#xA;│   +Hello world!&#xA;└── var as str: Hello world!&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;Now that we have a failing test(RED), the next job is to make it green by modifying the contents of the println statement.&lt;/li&gt;&#xA;&lt;li&gt;Run &lt;code&gt;cargo test&lt;/code&gt; again, The test now passes (Green)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The code for this is available at &lt;a href=&#34;https://github.com/kishaningithub/hello-world-tdd&#34;&gt;https://github.com/kishaningithub/hello-world-tdd&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
