<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Kishan B</title>
    <link>https://kishaningithub.github.io/blog/</link>
    <description>Recent content in Blogs on Kishan B</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 16 Feb 2022 14:02:53 +0530</lastBuildDate><atom:link href="https://kishaningithub.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use Zap to Perform Dast</title>
      <link>https://kishaningithub.github.io/blog/use-zap-to-perform-dast/</link>
      <pubDate>Wed, 16 Feb 2022 14:02:53 +0530</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/use-zap-to-perform-dast/</guid>
      <description>Introduction What is Dynamic Application Security Testing (DAST) What is ZAP How to use ZAP ZAP Scan for API Local Run Example - for API with Swagger For SOAP/GraphQL CircleCI Integrate Example - for API with Swagger For SOAP/GraphQL ZAP Scan for Application (with UI) Local Run for UI app CircleCI Integration for UI app Introduction What is Dynamic Application Security Testing (DAST) Dynamic application security testing (DAST) is a process of testing an application or software product in an operating state.</description>
    </item>
    
    <item>
      <title>Backup and restore all your apps in Mac OS</title>
      <link>https://kishaningithub.github.io/blog/back-up-and-restore-apps-in-mac/</link>
      <pubDate>Tue, 23 Mar 2021 10:24:15 +0530</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/back-up-and-restore-apps-in-mac/</guid>
      <description>Prerequisite This assumes you are installing everything using homebrew as a practice. If you are not doing it already, getting started is as easy as it gets. Some
Search for an app(cli/gui)
brew search &amp;lt;&amp;lt;app&amp;gt;&amp;gt; To install a cli app
brew install &amp;lt;&amp;lt;cli app&amp;gt;&amp;gt; To install a GUI app
brew install --cask &amp;lt;&amp;lt;gui app&amp;gt;&amp;gt; Backup all your apps (cli and gui) brew bundle dump This will output a file called Brewfile whose contents will look like the following</description>
    </item>
    
    <item>
      <title>Openssl by Example</title>
      <link>https://kishaningithub.github.io/blog/openssl-by-example/</link>
      <pubDate>Mon, 26 Nov 2018 22:43:54 +0100</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/openssl-by-example/</guid>
      <description>Symmetric key Encryption Decryption Asymmetric key Key Generation Public key Private key Encryption Decryption Sending signed messages Reading signed messages Encrypting private key Others Find openssl version List ciphers Symmetric key Encryption $ echo &amp;#34;top secret text&amp;#34; | openssl enc -aes-256-cbc -base64 enter aes-256-cbc encryption password: Verifying - enter aes-256-cbc encryption password: &amp;lt;&amp;lt; encrypted text &amp;gt;&amp;gt; Decryption $ echo &amp;#34;&amp;lt;&amp;lt; encrypted text &amp;gt;&amp;gt;&amp;#34; | openssl enc -d -aes-256-cbc -base64 enter aes-256-cbc decryption password: top secret text Asymmetric key Key Generation Public key openssl genrsa -out private.</description>
    </item>
    
    <item>
      <title>Aws cli by example</title>
      <link>https://kishaningithub.github.io/blog/aws-cli-by-example/</link>
      <pubDate>Mon, 26 Nov 2018 15:37:58 +0100</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/aws-cli-by-example/</guid>
      <description>Dynamo DB Get value using primary key aws dynamodb get-item --table-name users --key &amp;#39;{&amp;#34;username&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;test&amp;#34;}}&amp;#39; Dump table data as csv This expects that you have installed jq command on you system.
aws dynamodb scan --table-name users \ --query &amp;#34;Items[].[username.S,email.S,passwordHash.S]&amp;#34; \ --output json | jq -r &amp;#39;.[] | @csv&amp;#39; &amp;gt; dump.csv Query using a portion of composite key aws dynamodb query --table-name users \ --key-condition-expression &amp;#34;username = :username&amp;#34; \ --expression-attribute-values &amp;#39;{&amp;#34;:username&amp;#34;:{&amp;#34;S&amp;#34;:&amp;#34;test user&amp;#34;}}&amp;#39; KMS Generate data key from KMS master key aws kms generate-data-key-without-plaintext --key-id &amp;lt;&amp;lt;KMS master key&amp;gt;&amp;gt; --key-spec AES_256 --query CiphertextBlob --output text </description>
    </item>
    
    <item>
      <title>Graphviz by example</title>
      <link>https://kishaningithub.github.io/blog/graphviz-by-example/</link>
      <pubDate>Wed, 21 Nov 2018 06:34:16 +0100</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/graphviz-by-example/</guid>
      <description>&amp;laquo; work in progress &amp;raquo;
This page is a documentation of all the graphviz stuff that i did for my future self. I hope you find this useful as well üòä</description>
    </item>
    
    <item>
      <title>Configuring multiple databases in spring boot 2</title>
      <link>https://kishaningithub.github.io/blog/configuring-multiple-databases-in-spring-boot-2/</link>
      <pubDate>Sun, 18 Nov 2018 05:03:04 +0530</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/configuring-multiple-databases-in-spring-boot-2/</guid>
      <description>&amp;laquo; Work in progress &amp;raquo;
Have to felt the need for a spring boot application to connect with multiple relational databases? If so, Follow on to know how to get it up and running
Add the following your application.properties
app.datasource.first.url=jdbc:postgresql://localhost:5432/demo-db app.datasource.first.username=dbuser app.datasource.first.password=dbpass app.datasource.second.url=jdbc:mysql://localhost/second app.datasource.second.username=dbuser app.datasource.second.password=dbpass The complete source code can be found on github</description>
    </item>
    
    <item>
      <title>Migrating from glide to dep</title>
      <link>https://kishaningithub.github.io/blog/migrating-from-glide-to-dep/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/migrating-from-glide-to-dep/</guid>
      <description>I recently migrated one of the go lang projects that i contribute to which is csvdiff from glide to dep. Here is what i had to do.
‚ûú csvdiff git:(glide-to-dep-migration) dep init Importing configuration from glide. These are only initial constraints, and are further refined during the solve process. Detected glide configuration files... Converting from glide.yaml and glide.lock... Using ^1.0.0 as initial constraint for imported dep github.com/cespare/xxhash Trying v1.0.0 (5c37fe3) as initial lock for imported dep github.</description>
    </item>
    
    <item>
      <title>Breaking rust strings</title>
      <link>https://kishaningithub.github.io/blog/breaking-rust-strings/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kishaningithub.github.io/blog/breaking-rust-strings/</guid>
      <description>fn main() { let chinese_text = &amp;#34;ÂèØÈÄöÈÅéÊØèÈ†ÅÂ∑¶‰∏äËßíÁöÑÈÄ£ÁµêÈö®ÊôÇË™øÊï¥&amp;#34;; let chinese_text_slice = &amp;amp;chinese_text[0..1]; // Focus here println!(&amp;#34;{}&amp;#34;, chinese_text_slice); } In the above code i want to extract the first character out which is ÂèØ. Since the end indices are exclusive in rust i put forth a slice 0..1 on chinese_text.
If you expected the output to be ÂèØ. You are in for a surprise!
break_strings$ RUST_BACKTRACE=1 cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.</description>
    </item>
    
  </channel>
</rss>
